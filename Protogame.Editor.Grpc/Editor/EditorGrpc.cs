// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Editor.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Protogame.Editor.Grpc.Editor {
  public static partial class Presence
  {
    static readonly string __ServiceName = "Presence";

    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.CheckPresenceRequest> __Marshaller_CheckPresenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.CheckPresenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.CheckPresenceResponse> __Marshaller_CheckPresenceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.CheckPresenceResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.CheckPresenceRequest, global::Protogame.Editor.Grpc.Editor.CheckPresenceResponse> __Method_Check = new grpc::Method<global::Protogame.Editor.Grpc.Editor.CheckPresenceRequest, global::Protogame.Editor.Grpc.Editor.CheckPresenceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Check",
        __Marshaller_CheckPresenceRequest,
        __Marshaller_CheckPresenceResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Presence</summary>
    public abstract partial class PresenceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.CheckPresenceResponse> Check(global::Protogame.Editor.Grpc.Editor.CheckPresenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Presence</summary>
    public partial class PresenceClient : grpc::ClientBase<PresenceClient>
    {
      /// <summary>Creates a new client for Presence</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PresenceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Presence that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PresenceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PresenceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PresenceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Protogame.Editor.Grpc.Editor.CheckPresenceResponse Check(global::Protogame.Editor.Grpc.Editor.CheckPresenceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Check(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.CheckPresenceResponse Check(global::Protogame.Editor.Grpc.Editor.CheckPresenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Check, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.CheckPresenceResponse> CheckAsync(global::Protogame.Editor.Grpc.Editor.CheckPresenceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.CheckPresenceResponse> CheckAsync(global::Protogame.Editor.Grpc.Editor.CheckPresenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Check, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PresenceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PresenceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PresenceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Check, serviceImpl.Check).Build();
    }

  }
  public static partial class Console
  {
    static readonly string __ServiceName = "Console";

    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.LogRequest> __Marshaller_LogRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.LogRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.LogResponse> __Marshaller_LogResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.LogResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse> __Method_LogDebug = new grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogDebug",
        __Marshaller_LogRequest,
        __Marshaller_LogResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse> __Method_LogInfo = new grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogInfo",
        __Marshaller_LogRequest,
        __Marshaller_LogResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse> __Method_LogWarn = new grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogWarn",
        __Marshaller_LogRequest,
        __Marshaller_LogResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse> __Method_LogError = new grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogError",
        __Marshaller_LogRequest,
        __Marshaller_LogResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Console</summary>
    public abstract partial class ConsoleBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.LogResponse> LogDebug(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.LogResponse> LogInfo(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.LogResponse> LogWarn(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.LogResponse> LogError(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Console</summary>
    public partial class ConsoleClient : grpc::ClientBase<ConsoleClient>
    {
      /// <summary>Creates a new client for Console</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ConsoleClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Console that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ConsoleClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ConsoleClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ConsoleClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogDebug(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogDebug(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogDebug(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogDebug, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogDebugAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogDebugAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogDebugAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogDebug, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogInfo(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogInfo(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogInfoAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogInfoAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogInfo, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogWarn(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogWarn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogWarn(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogWarn, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogWarnAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogWarnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogWarnAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogWarn, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogError(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogError(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogError(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogError, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogErrorAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogErrorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogErrorAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogError, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ConsoleClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConsoleClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ConsoleBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_LogDebug, serviceImpl.LogDebug)
          .AddMethod(__Method_LogInfo, serviceImpl.LogInfo)
          .AddMethod(__Method_LogWarn, serviceImpl.LogWarn)
          .AddMethod(__Method_LogError, serviceImpl.LogError).Build();
    }

  }
  public static partial class ProjectManager
  {
    static readonly string __ServiceName = "ProjectManager";

    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.GetProjectRequest> __Marshaller_GetProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.GetProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.GetProjectResponse> __Marshaller_GetProjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.GetProjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsRequest> __Marshaller_GetScannedContentPathsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsResponse> __Marshaller_GetScannedContentPathsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.GetProjectRequest, global::Protogame.Editor.Grpc.Editor.GetProjectResponse> __Method_GetProject = new grpc::Method<global::Protogame.Editor.Grpc.Editor.GetProjectRequest, global::Protogame.Editor.Grpc.Editor.GetProjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProject",
        __Marshaller_GetProjectRequest,
        __Marshaller_GetProjectResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsRequest, global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsResponse> __Method_GetScannedContentPaths = new grpc::Method<global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsRequest, global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetScannedContentPaths",
        __Marshaller_GetScannedContentPathsRequest,
        __Marshaller_GetScannedContentPathsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of ProjectManager</summary>
    public abstract partial class ProjectManagerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.GetProjectResponse> GetProject(global::Protogame.Editor.Grpc.Editor.GetProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsResponse> GetScannedContentPaths(global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ProjectManager</summary>
    public partial class ProjectManagerClient : grpc::ClientBase<ProjectManagerClient>
    {
      /// <summary>Creates a new client for ProjectManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ProjectManagerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ProjectManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ProjectManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ProjectManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ProjectManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Protogame.Editor.Grpc.Editor.GetProjectResponse GetProject(global::Protogame.Editor.Grpc.Editor.GetProjectRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.GetProjectResponse GetProject(global::Protogame.Editor.Grpc.Editor.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProject, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.GetProjectResponse> GetProjectAsync(global::Protogame.Editor.Grpc.Editor.GetProjectRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.GetProjectResponse> GetProjectAsync(global::Protogame.Editor.Grpc.Editor.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProject, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsResponse GetScannedContentPaths(global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetScannedContentPaths(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsResponse GetScannedContentPaths(global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetScannedContentPaths, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsResponse> GetScannedContentPathsAsync(global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetScannedContentPathsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsResponse> GetScannedContentPathsAsync(global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetScannedContentPaths, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ProjectManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProjectManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ProjectManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetProject, serviceImpl.GetProject)
          .AddMethod(__Method_GetScannedContentPaths, serviceImpl.GetScannedContentPaths).Build();
    }

  }
  public static partial class GameHoster
  {
    static readonly string __ServiceName = "GameHoster";

    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsRequest> __Marshaller_GetBackBufferDimensionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsResponse> __Marshaller_GetBackBufferDimensionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryRequest> __Marshaller_GetBaseDirectoryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryResponse> __Marshaller_GetBaseDirectoryResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedRequest> __Marshaller_PlaybackStateChangedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedResponse> __Marshaller_PlaybackStateChangedResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsRequest, global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsResponse> __Method_GetBackBufferDimensions = new grpc::Method<global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsRequest, global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBackBufferDimensions",
        __Marshaller_GetBackBufferDimensionsRequest,
        __Marshaller_GetBackBufferDimensionsResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryRequest, global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryResponse> __Method_GetBaseDirectory = new grpc::Method<global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryRequest, global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBaseDirectory",
        __Marshaller_GetBaseDirectoryRequest,
        __Marshaller_GetBaseDirectoryResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedRequest, global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedResponse> __Method_PlaybackStateChanged = new grpc::Method<global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedRequest, global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PlaybackStateChanged",
        __Marshaller_PlaybackStateChangedRequest,
        __Marshaller_PlaybackStateChangedResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of GameHoster</summary>
    public abstract partial class GameHosterBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsResponse> GetBackBufferDimensions(global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryResponse> GetBaseDirectory(global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedResponse> PlaybackStateChanged(global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GameHoster</summary>
    public partial class GameHosterClient : grpc::ClientBase<GameHosterClient>
    {
      /// <summary>Creates a new client for GameHoster</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GameHosterClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GameHoster that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GameHosterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GameHosterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GameHosterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsResponse GetBackBufferDimensions(global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBackBufferDimensions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsResponse GetBackBufferDimensions(global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBackBufferDimensions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsResponse> GetBackBufferDimensionsAsync(global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBackBufferDimensionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsResponse> GetBackBufferDimensionsAsync(global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBackBufferDimensions, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryResponse GetBaseDirectory(global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBaseDirectory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryResponse GetBaseDirectory(global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBaseDirectory, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryResponse> GetBaseDirectoryAsync(global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBaseDirectoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryResponse> GetBaseDirectoryAsync(global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBaseDirectory, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedResponse PlaybackStateChanged(global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PlaybackStateChanged(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedResponse PlaybackStateChanged(global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PlaybackStateChanged, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedResponse> PlaybackStateChangedAsync(global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PlaybackStateChangedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedResponse> PlaybackStateChangedAsync(global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PlaybackStateChanged, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GameHosterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GameHosterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GameHosterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetBackBufferDimensions, serviceImpl.GetBackBufferDimensions)
          .AddMethod(__Method_GetBaseDirectory, serviceImpl.GetBaseDirectory)
          .AddMethod(__Method_PlaybackStateChanged, serviceImpl.PlaybackStateChanged).Build();
    }

  }
  public static partial class SignalBus
  {
    static readonly string __ServiceName = "SignalBus";

    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.ReceiveSignalRequest> __Marshaller_ReceiveSignalRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.ReceiveSignalRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.ReceiveSignalResponse> __Marshaller_ReceiveSignalResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.ReceiveSignalResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.ReceiveSignalRequest, global::Protogame.Editor.Grpc.Editor.ReceiveSignalResponse> __Method_Receive = new grpc::Method<global::Protogame.Editor.Grpc.Editor.ReceiveSignalRequest, global::Protogame.Editor.Grpc.Editor.ReceiveSignalResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Receive",
        __Marshaller_ReceiveSignalRequest,
        __Marshaller_ReceiveSignalResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.Services[4]; }
    }

    /// <summary>Base class for server-side implementations of SignalBus</summary>
    public abstract partial class SignalBusBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.ReceiveSignalResponse> Receive(global::Protogame.Editor.Grpc.Editor.ReceiveSignalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SignalBus</summary>
    public partial class SignalBusClient : grpc::ClientBase<SignalBusClient>
    {
      /// <summary>Creates a new client for SignalBus</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SignalBusClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SignalBus that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SignalBusClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SignalBusClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SignalBusClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Protogame.Editor.Grpc.Editor.ReceiveSignalResponse Receive(global::Protogame.Editor.Grpc.Editor.ReceiveSignalRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Receive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.ReceiveSignalResponse Receive(global::Protogame.Editor.Grpc.Editor.ReceiveSignalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Receive, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.ReceiveSignalResponse> ReceiveAsync(global::Protogame.Editor.Grpc.Editor.ReceiveSignalRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReceiveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.ReceiveSignalResponse> ReceiveAsync(global::Protogame.Editor.Grpc.Editor.ReceiveSignalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Receive, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SignalBusClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SignalBusClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SignalBusBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Receive, serviceImpl.Receive).Build();
    }

  }
  public static partial class WindowManagement
  {
    static readonly string __ServiceName = "WindowManagement";

    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.ActivateRequest> __Marshaller_ActivateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.ActivateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.ActivateResponse> __Marshaller_ActivateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.ActivateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.ActivateGameWindowRequest> __Marshaller_ActivateGameWindowRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.ActivateGameWindowRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.ActivateGameWindowResponse> __Marshaller_ActivateGameWindowResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.ActivateGameWindowResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.AllocateWindowRequest> __Marshaller_AllocateWindowRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.AllocateWindowRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.AllocateWindowResponse> __Marshaller_AllocateWindowResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.AllocateWindowResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesRequest> __Marshaller_SetWindowPropertiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesResponse> __Marshaller_SetWindowPropertiesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.ActivateRequest, global::Protogame.Editor.Grpc.Editor.ActivateResponse> __Method_Activate = new grpc::Method<global::Protogame.Editor.Grpc.Editor.ActivateRequest, global::Protogame.Editor.Grpc.Editor.ActivateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Activate",
        __Marshaller_ActivateRequest,
        __Marshaller_ActivateResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.ActivateGameWindowRequest, global::Protogame.Editor.Grpc.Editor.ActivateGameWindowResponse> __Method_ActivateGameWindow = new grpc::Method<global::Protogame.Editor.Grpc.Editor.ActivateGameWindowRequest, global::Protogame.Editor.Grpc.Editor.ActivateGameWindowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateGameWindow",
        __Marshaller_ActivateGameWindowRequest,
        __Marshaller_ActivateGameWindowResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.AllocateWindowRequest, global::Protogame.Editor.Grpc.Editor.AllocateWindowResponse> __Method_AllocateWindow = new grpc::Method<global::Protogame.Editor.Grpc.Editor.AllocateWindowRequest, global::Protogame.Editor.Grpc.Editor.AllocateWindowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AllocateWindow",
        __Marshaller_AllocateWindowRequest,
        __Marshaller_AllocateWindowResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesRequest, global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesResponse> __Method_SetWindowProperties = new grpc::Method<global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesRequest, global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetWindowProperties",
        __Marshaller_SetWindowPropertiesRequest,
        __Marshaller_SetWindowPropertiesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.Services[5]; }
    }

    /// <summary>Base class for server-side implementations of WindowManagement</summary>
    public abstract partial class WindowManagementBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.ActivateResponse> Activate(global::Protogame.Editor.Grpc.Editor.ActivateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.ActivateGameWindowResponse> ActivateGameWindow(global::Protogame.Editor.Grpc.Editor.ActivateGameWindowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.AllocateWindowResponse> AllocateWindow(global::Protogame.Editor.Grpc.Editor.AllocateWindowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesResponse> SetWindowProperties(global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WindowManagement</summary>
    public partial class WindowManagementClient : grpc::ClientBase<WindowManagementClient>
    {
      /// <summary>Creates a new client for WindowManagement</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WindowManagementClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WindowManagement that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WindowManagementClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WindowManagementClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WindowManagementClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Protogame.Editor.Grpc.Editor.ActivateResponse Activate(global::Protogame.Editor.Grpc.Editor.ActivateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Activate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.ActivateResponse Activate(global::Protogame.Editor.Grpc.Editor.ActivateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Activate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.ActivateResponse> ActivateAsync(global::Protogame.Editor.Grpc.Editor.ActivateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ActivateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.ActivateResponse> ActivateAsync(global::Protogame.Editor.Grpc.Editor.ActivateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Activate, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.ActivateGameWindowResponse ActivateGameWindow(global::Protogame.Editor.Grpc.Editor.ActivateGameWindowRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ActivateGameWindow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.ActivateGameWindowResponse ActivateGameWindow(global::Protogame.Editor.Grpc.Editor.ActivateGameWindowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateGameWindow, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.ActivateGameWindowResponse> ActivateGameWindowAsync(global::Protogame.Editor.Grpc.Editor.ActivateGameWindowRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ActivateGameWindowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.ActivateGameWindowResponse> ActivateGameWindowAsync(global::Protogame.Editor.Grpc.Editor.ActivateGameWindowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateGameWindow, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.AllocateWindowResponse AllocateWindow(global::Protogame.Editor.Grpc.Editor.AllocateWindowRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllocateWindow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.AllocateWindowResponse AllocateWindow(global::Protogame.Editor.Grpc.Editor.AllocateWindowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AllocateWindow, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.AllocateWindowResponse> AllocateWindowAsync(global::Protogame.Editor.Grpc.Editor.AllocateWindowRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllocateWindowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.AllocateWindowResponse> AllocateWindowAsync(global::Protogame.Editor.Grpc.Editor.AllocateWindowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AllocateWindow, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesResponse SetWindowProperties(global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetWindowProperties(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesResponse SetWindowProperties(global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetWindowProperties, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesResponse> SetWindowPropertiesAsync(global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetWindowPropertiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesResponse> SetWindowPropertiesAsync(global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetWindowProperties, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WindowManagementClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WindowManagementClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WindowManagementBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Activate, serviceImpl.Activate)
          .AddMethod(__Method_ActivateGameWindow, serviceImpl.ActivateGameWindow)
          .AddMethod(__Method_AllocateWindow, serviceImpl.AllocateWindow)
          .AddMethod(__Method_SetWindowProperties, serviceImpl.SetWindowProperties).Build();
    }

  }
}
#endregion
