// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Editor.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protogame.Editor.Grpc.Editor {

  /// <summary>Holder for reflection information generated from Editor.proto</summary>
  public static partial class EditorReflection {

    #region Descriptor
    /// <summary>File descriptor for Editor.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EditorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxFZGl0b3IucHJvdG8iFgoUQ2hlY2tQcmVzZW5jZVJlcXVlc3QiFwoVQ2hl",
            "Y2tQcmVzZW5jZVJlc3BvbnNlIh0KCkxvZ1JlcXVlc3QSDwoHbWVzc2FnZRgB",
            "IAEoCSINCgtMb2dSZXNwb25zZSITChFHZXRQcm9qZWN0UmVxdWVzdCJDChJH",
            "ZXRQcm9qZWN0UmVzcG9uc2USEgoKaGFzUHJvamVjdBgBIAEoCBIZCgdwcm9q",
            "ZWN0GAIgASgLMgguUHJvamVjdCI3Ch1HZXRTY2FubmVkQ29udGVudFBhdGhz",
            "UmVxdWVzdBIWCg5kZWZpbml0aW9uTmFtZRgBIAEoCSIyCh5HZXRTY2FubmVk",
            "Q29udGVudFBhdGhzUmVzcG9uc2USEAoIZmlsZVBhdGgYASADKAki7AEKB1By",
            "b2plY3QSEwoLcHJvamVjdFBhdGgYASABKAkSFQoNbG9hZGluZ1N0YXR1cxgC",
            "IAEoCRIMCgRuYW1lGAMgASgJEhoKCHBhY2thZ2VzGAQgAygLMgguUGFja2Fn",
            "ZRIgCgtkZWZpbml0aW9ucxgFIAMoCzILLkRlZmluaXRpb24SIQoZZGVmYXVs",
            "dEdhbWVEZWZpbml0aW9uTmFtZRgGIAEoCRIYChBzb2x1dGlvbkZpbGVQYXRo",
            "GAcgASgJEhoKEmRlZmF1bHRHYW1lQmluUGF0aBgIIAEoCRIQCghoYXNoQ29k",
            "ZRgJIAEoBSI/CgdQYWNrYWdlEhIKCnJlcG9zaXRvcnkYASABKAkSDwoHcGFj",
            "a2FnZRgCIAEoCRIPCgd2ZXJzaW9uGAMgASgJIk8KCkRlZmluaXRpb24SDAoE",
            "bmFtZRgBIAEoCRIMCgR0eXBlGAIgASgJEgwKBHJvbGUYAyABKAkSFwoPeG1s",
            "RG9jdW1lbnRQYXRoGAQgASgJIiAKHkdldEJhY2tCdWZmZXJEaW1lbnNpb25z",
            "UmVxdWVzdCJACh9HZXRCYWNrQnVmZmVyRGltZW5zaW9uc1Jlc3BvbnNlEg0K",
            "BXdpZHRoGAEgASgFEg4KBmhlaWdodBgCIAEoBSIZChdHZXRCYXNlRGlyZWN0",
            "b3J5UmVxdWVzdCIxChhHZXRCYXNlRGlyZWN0b3J5UmVzcG9uc2USFQoNYmFz",
            "ZURpcmVjdG9yeRgBIAEoCSJbChtQbGF5YmFja1N0YXRlQ2hhbmdlZFJlcXVl",
            "c3QSHQoFc3RhdGUYASABKA4yDi5QbGF5YmFja1N0YXRlEh0KCXN0YXJ0VGlt",
            "ZRgCIAEoCzIKLlRpbWVzdGFtcCIeChxQbGF5YmFja1N0YXRlQ2hhbmdlZFJl",
            "c3BvbnNlIiIKCVRpbWVzdGFtcBIVCg11bml4VGltZXN0YW1wGAEgASgEIjIK",
            "FFJlY2VpdmVTaWduYWxSZXF1ZXN0EgwKBG5hbWUYASABKAkSDAoEZGF0YRgC",
            "IAEoDCIXChVSZWNlaXZlU2lnbmFsUmVzcG9uc2UiHQoPQWN0aXZhdGVSZXF1",
            "ZXN0EgoKAmlkGAEgASgDIhIKEEFjdGl2YXRlUmVzcG9uc2UiGwoZQWN0aXZh",
            "dGVHYW1lV2luZG93UmVxdWVzdCIcChpBY3RpdmF0ZUdhbWVXaW5kb3dSZXNw",
            "b25zZSI8ChVBbGxvY2F0ZVdpbmRvd1JlcXVlc3QSEQoJcGFyYW1ldGVyGAEg",
            "ASgJEhAKCGxvY2F0aW9uGAIgASgJIjsKFkFsbG9jYXRlV2luZG93UmVzcG9u",
            "c2USFQoNYWxyZWFkeUV4aXN0cxgBIAEoCBIKCgJpZBgCIAEoAyJJChpTZXRX",
            "aW5kb3dQcm9wZXJ0aWVzUmVxdWVzdBIKCgJpZBgBIAEoAxINCgV0aXRsZRgC",
            "IAEoCRIQCghpY29uTmFtZRgDIAEoCSIdChtTZXRXaW5kb3dQcm9wZXJ0aWVz",
            "UmVzcG9uc2UqQQoNUGxheWJhY2tTdGF0ZRILCgdMb2FkaW5nEAASCgoGTG9h",
            "ZGVkEAESCwoHUGxheWluZxACEgoKBlBhdXNlZBADMkIKCFByZXNlbmNlEjYK",
            "BUNoZWNrEhUuQ2hlY2tQcmVzZW5jZVJlcXVlc3QaFi5DaGVja1ByZXNlbmNl",
            "UmVzcG9uc2UyowEKB0NvbnNvbGUSJQoITG9nRGVidWcSCy5Mb2dSZXF1ZXN0",
            "GgwuTG9nUmVzcG9uc2USJAoHTG9nSW5mbxILLkxvZ1JlcXVlc3QaDC5Mb2dS",
            "ZXNwb25zZRIkCgdMb2dXYXJuEgsuTG9nUmVxdWVzdBoMLkxvZ1Jlc3BvbnNl",
            "EiUKCExvZ0Vycm9yEgsuTG9nUmVxdWVzdBoMLkxvZ1Jlc3BvbnNlMqIBCg5Q",
            "cm9qZWN0TWFuYWdlchI1CgpHZXRQcm9qZWN0EhIuR2V0UHJvamVjdFJlcXVl",
            "c3QaEy5HZXRQcm9qZWN0UmVzcG9uc2USWQoWR2V0U2Nhbm5lZENvbnRlbnRQ",
            "YXRocxIeLkdldFNjYW5uZWRDb250ZW50UGF0aHNSZXF1ZXN0Gh8uR2V0U2Nh",
            "bm5lZENvbnRlbnRQYXRoc1Jlc3BvbnNlMogCCgpHYW1lSG9zdGVyElwKF0dl",
            "dEJhY2tCdWZmZXJEaW1lbnNpb25zEh8uR2V0QmFja0J1ZmZlckRpbWVuc2lv",
            "bnNSZXF1ZXN0GiAuR2V0QmFja0J1ZmZlckRpbWVuc2lvbnNSZXNwb25zZRJH",
            "ChBHZXRCYXNlRGlyZWN0b3J5EhguR2V0QmFzZURpcmVjdG9yeVJlcXVlc3Qa",
            "GS5HZXRCYXNlRGlyZWN0b3J5UmVzcG9uc2USUwoUUGxheWJhY2tTdGF0ZUNo",
            "YW5nZWQSHC5QbGF5YmFja1N0YXRlQ2hhbmdlZFJlcXVlc3QaHS5QbGF5YmFj",
            "a1N0YXRlQ2hhbmdlZFJlc3BvbnNlMkUKCVNpZ25hbEJ1cxI4CgdSZWNlaXZl",
            "EhUuUmVjZWl2ZVNpZ25hbFJlcXVlc3QaFi5SZWNlaXZlU2lnbmFsUmVzcG9u",
            "c2UypwIKEFdpbmRvd01hbmFnZW1lbnQSLwoIQWN0aXZhdGUSEC5BY3RpdmF0",
            "ZVJlcXVlc3QaES5BY3RpdmF0ZVJlc3BvbnNlEk0KEkFjdGl2YXRlR2FtZVdp",
            "bmRvdxIaLkFjdGl2YXRlR2FtZVdpbmRvd1JlcXVlc3QaGy5BY3RpdmF0ZUdh",
            "bWVXaW5kb3dSZXNwb25zZRJBCg5BbGxvY2F0ZVdpbmRvdxIWLkFsbG9jYXRl",
            "V2luZG93UmVxdWVzdBoXLkFsbG9jYXRlV2luZG93UmVzcG9uc2USUAoTU2V0",
            "V2luZG93UHJvcGVydGllcxIbLlNldFdpbmRvd1Byb3BlcnRpZXNSZXF1ZXN0",
            "GhwuU2V0V2luZG93UHJvcGVydGllc1Jlc3BvbnNlQh+qAhxQcm90b2dhbWUu",
            "RWRpdG9yLkdycGMuRWRpdG9yYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Protogame.Editor.Grpc.Editor.PlaybackState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.CheckPresenceRequest), global::Protogame.Editor.Grpc.Editor.CheckPresenceRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.CheckPresenceResponse), global::Protogame.Editor.Grpc.Editor.CheckPresenceResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.LogRequest), global::Protogame.Editor.Grpc.Editor.LogRequest.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.LogResponse), global::Protogame.Editor.Grpc.Editor.LogResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.GetProjectRequest), global::Protogame.Editor.Grpc.Editor.GetProjectRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.GetProjectResponse), global::Protogame.Editor.Grpc.Editor.GetProjectResponse.Parser, new[]{ "HasProject", "Project" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsRequest), global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsRequest.Parser, new[]{ "DefinitionName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsResponse), global::Protogame.Editor.Grpc.Editor.GetScannedContentPathsResponse.Parser, new[]{ "FilePath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.Project), global::Protogame.Editor.Grpc.Editor.Project.Parser, new[]{ "ProjectPath", "LoadingStatus", "Name", "Packages", "Definitions", "DefaultGameDefinitionName", "SolutionFilePath", "DefaultGameBinPath", "HashCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.Package), global::Protogame.Editor.Grpc.Editor.Package.Parser, new[]{ "Repository", "Package_", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.Definition), global::Protogame.Editor.Grpc.Editor.Definition.Parser, new[]{ "Name", "Type", "Role", "XmlDocumentPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsRequest), global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsResponse), global::Protogame.Editor.Grpc.Editor.GetBackBufferDimensionsResponse.Parser, new[]{ "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryRequest), global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryResponse), global::Protogame.Editor.Grpc.Editor.GetBaseDirectoryResponse.Parser, new[]{ "BaseDirectory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedRequest), global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedRequest.Parser, new[]{ "State", "StartTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedResponse), global::Protogame.Editor.Grpc.Editor.PlaybackStateChangedResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.Timestamp), global::Protogame.Editor.Grpc.Editor.Timestamp.Parser, new[]{ "UnixTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.ReceiveSignalRequest), global::Protogame.Editor.Grpc.Editor.ReceiveSignalRequest.Parser, new[]{ "Name", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.ReceiveSignalResponse), global::Protogame.Editor.Grpc.Editor.ReceiveSignalResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.ActivateRequest), global::Protogame.Editor.Grpc.Editor.ActivateRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.ActivateResponse), global::Protogame.Editor.Grpc.Editor.ActivateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.ActivateGameWindowRequest), global::Protogame.Editor.Grpc.Editor.ActivateGameWindowRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.ActivateGameWindowResponse), global::Protogame.Editor.Grpc.Editor.ActivateGameWindowResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.AllocateWindowRequest), global::Protogame.Editor.Grpc.Editor.AllocateWindowRequest.Parser, new[]{ "Parameter", "Location" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.AllocateWindowResponse), global::Protogame.Editor.Grpc.Editor.AllocateWindowResponse.Parser, new[]{ "AlreadyExists", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesRequest), global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesRequest.Parser, new[]{ "Id", "Title", "IconName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesResponse), global::Protogame.Editor.Grpc.Editor.SetWindowPropertiesResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PlaybackState {
    [pbr::OriginalName("Loading")] Loading = 0,
    [pbr::OriginalName("Loaded")] Loaded = 1,
    [pbr::OriginalName("Playing")] Playing = 2,
    [pbr::OriginalName("Paused")] Paused = 3,
  }

  #endregion

  #region Messages
  public sealed partial class CheckPresenceRequest : pb::IMessage<CheckPresenceRequest> {
    private static readonly pb::MessageParser<CheckPresenceRequest> _parser = new pb::MessageParser<CheckPresenceRequest>(() => new CheckPresenceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckPresenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPresenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPresenceRequest(CheckPresenceRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPresenceRequest Clone() {
      return new CheckPresenceRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckPresenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckPresenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckPresenceRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CheckPresenceResponse : pb::IMessage<CheckPresenceResponse> {
    private static readonly pb::MessageParser<CheckPresenceResponse> _parser = new pb::MessageParser<CheckPresenceResponse>(() => new CheckPresenceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckPresenceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPresenceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPresenceResponse(CheckPresenceResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckPresenceResponse Clone() {
      return new CheckPresenceResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckPresenceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckPresenceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckPresenceResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class LogRequest : pb::IMessage<LogRequest> {
    private static readonly pb::MessageParser<LogRequest> _parser = new pb::MessageParser<LogRequest>(() => new LogRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRequest(LogRequest other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRequest Clone() {
      return new LogRequest(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogRequest other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogResponse : pb::IMessage<LogResponse> {
    private static readonly pb::MessageParser<LogResponse> _parser = new pb::MessageParser<LogResponse>(() => new LogResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogResponse(LogResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogResponse Clone() {
      return new LogResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetProjectRequest : pb::IMessage<GetProjectRequest> {
    private static readonly pb::MessageParser<GetProjectRequest> _parser = new pb::MessageParser<GetProjectRequest>(() => new GetProjectRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProjectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProjectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProjectRequest(GetProjectRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProjectRequest Clone() {
      return new GetProjectRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProjectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProjectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProjectRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetProjectResponse : pb::IMessage<GetProjectResponse> {
    private static readonly pb::MessageParser<GetProjectResponse> _parser = new pb::MessageParser<GetProjectResponse>(() => new GetProjectResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProjectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProjectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProjectResponse(GetProjectResponse other) : this() {
      hasProject_ = other.hasProject_;
      Project = other.project_ != null ? other.Project.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProjectResponse Clone() {
      return new GetProjectResponse(this);
    }

    /// <summary>Field number for the "hasProject" field.</summary>
    public const int HasProjectFieldNumber = 1;
    private bool hasProject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProject {
      get { return hasProject_; }
      set {
        hasProject_ = value;
      }
    }

    /// <summary>Field number for the "project" field.</summary>
    public const int ProjectFieldNumber = 2;
    private global::Protogame.Editor.Grpc.Editor.Project project_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protogame.Editor.Grpc.Editor.Project Project {
      get { return project_; }
      set {
        project_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProjectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProjectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HasProject != other.HasProject) return false;
      if (!object.Equals(Project, other.Project)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProject != false) hash ^= HasProject.GetHashCode();
      if (project_ != null) hash ^= Project.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasProject != false) {
        output.WriteRawTag(8);
        output.WriteBool(HasProject);
      }
      if (project_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Project);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasProject != false) {
        size += 1 + 1;
      }
      if (project_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Project);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProjectResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasProject != false) {
        HasProject = other.HasProject;
      }
      if (other.project_ != null) {
        if (project_ == null) {
          project_ = new global::Protogame.Editor.Grpc.Editor.Project();
        }
        Project.MergeFrom(other.Project);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HasProject = input.ReadBool();
            break;
          }
          case 18: {
            if (project_ == null) {
              project_ = new global::Protogame.Editor.Grpc.Editor.Project();
            }
            input.ReadMessage(project_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetScannedContentPathsRequest : pb::IMessage<GetScannedContentPathsRequest> {
    private static readonly pb::MessageParser<GetScannedContentPathsRequest> _parser = new pb::MessageParser<GetScannedContentPathsRequest>(() => new GetScannedContentPathsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetScannedContentPathsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScannedContentPathsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScannedContentPathsRequest(GetScannedContentPathsRequest other) : this() {
      definitionName_ = other.definitionName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScannedContentPathsRequest Clone() {
      return new GetScannedContentPathsRequest(this);
    }

    /// <summary>Field number for the "definitionName" field.</summary>
    public const int DefinitionNameFieldNumber = 1;
    private string definitionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefinitionName {
      get { return definitionName_; }
      set {
        definitionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetScannedContentPathsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetScannedContentPathsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DefinitionName != other.DefinitionName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DefinitionName.Length != 0) hash ^= DefinitionName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DefinitionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DefinitionName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DefinitionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefinitionName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetScannedContentPathsRequest other) {
      if (other == null) {
        return;
      }
      if (other.DefinitionName.Length != 0) {
        DefinitionName = other.DefinitionName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DefinitionName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetScannedContentPathsResponse : pb::IMessage<GetScannedContentPathsResponse> {
    private static readonly pb::MessageParser<GetScannedContentPathsResponse> _parser = new pb::MessageParser<GetScannedContentPathsResponse>(() => new GetScannedContentPathsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetScannedContentPathsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScannedContentPathsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScannedContentPathsResponse(GetScannedContentPathsResponse other) : this() {
      filePath_ = other.filePath_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScannedContentPathsResponse Clone() {
      return new GetScannedContentPathsResponse(this);
    }

    /// <summary>Field number for the "filePath" field.</summary>
    public const int FilePathFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_filePath_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> filePath_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FilePath {
      get { return filePath_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetScannedContentPathsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetScannedContentPathsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!filePath_.Equals(other.filePath_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= filePath_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      filePath_.WriteTo(output, _repeated_filePath_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += filePath_.CalculateSize(_repeated_filePath_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetScannedContentPathsResponse other) {
      if (other == null) {
        return;
      }
      filePath_.Add(other.filePath_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            filePath_.AddEntriesFrom(input, _repeated_filePath_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Project : pb::IMessage<Project> {
    private static readonly pb::MessageParser<Project> _parser = new pb::MessageParser<Project>(() => new Project());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Project> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Project() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Project(Project other) : this() {
      projectPath_ = other.projectPath_;
      loadingStatus_ = other.loadingStatus_;
      name_ = other.name_;
      packages_ = other.packages_.Clone();
      definitions_ = other.definitions_.Clone();
      defaultGameDefinitionName_ = other.defaultGameDefinitionName_;
      solutionFilePath_ = other.solutionFilePath_;
      defaultGameBinPath_ = other.defaultGameBinPath_;
      hashCode_ = other.hashCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Project Clone() {
      return new Project(this);
    }

    /// <summary>Field number for the "projectPath" field.</summary>
    public const int ProjectPathFieldNumber = 1;
    private string projectPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectPath {
      get { return projectPath_; }
      set {
        projectPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loadingStatus" field.</summary>
    public const int LoadingStatusFieldNumber = 2;
    private string loadingStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoadingStatus {
      get { return loadingStatus_; }
      set {
        loadingStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packages" field.</summary>
    public const int PackagesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protogame.Editor.Grpc.Editor.Package> _repeated_packages_codec
        = pb::FieldCodec.ForMessage(34, global::Protogame.Editor.Grpc.Editor.Package.Parser);
    private readonly pbc::RepeatedField<global::Protogame.Editor.Grpc.Editor.Package> packages_ = new pbc::RepeatedField<global::Protogame.Editor.Grpc.Editor.Package>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protogame.Editor.Grpc.Editor.Package> Packages {
      get { return packages_; }
    }

    /// <summary>Field number for the "definitions" field.</summary>
    public const int DefinitionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protogame.Editor.Grpc.Editor.Definition> _repeated_definitions_codec
        = pb::FieldCodec.ForMessage(42, global::Protogame.Editor.Grpc.Editor.Definition.Parser);
    private readonly pbc::RepeatedField<global::Protogame.Editor.Grpc.Editor.Definition> definitions_ = new pbc::RepeatedField<global::Protogame.Editor.Grpc.Editor.Definition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protogame.Editor.Grpc.Editor.Definition> Definitions {
      get { return definitions_; }
    }

    /// <summary>Field number for the "defaultGameDefinitionName" field.</summary>
    public const int DefaultGameDefinitionNameFieldNumber = 6;
    private string defaultGameDefinitionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultGameDefinitionName {
      get { return defaultGameDefinitionName_; }
      set {
        defaultGameDefinitionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "solutionFilePath" field.</summary>
    public const int SolutionFilePathFieldNumber = 7;
    private string solutionFilePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SolutionFilePath {
      get { return solutionFilePath_; }
      set {
        solutionFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defaultGameBinPath" field.</summary>
    public const int DefaultGameBinPathFieldNumber = 8;
    private string defaultGameBinPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultGameBinPath {
      get { return defaultGameBinPath_; }
      set {
        defaultGameBinPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hashCode" field.</summary>
    public const int HashCodeFieldNumber = 9;
    private int hashCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HashCode {
      get { return hashCode_; }
      set {
        hashCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Project);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Project other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectPath != other.ProjectPath) return false;
      if (LoadingStatus != other.LoadingStatus) return false;
      if (Name != other.Name) return false;
      if(!packages_.Equals(other.packages_)) return false;
      if(!definitions_.Equals(other.definitions_)) return false;
      if (DefaultGameDefinitionName != other.DefaultGameDefinitionName) return false;
      if (SolutionFilePath != other.SolutionFilePath) return false;
      if (DefaultGameBinPath != other.DefaultGameBinPath) return false;
      if (HashCode != other.HashCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectPath.Length != 0) hash ^= ProjectPath.GetHashCode();
      if (LoadingStatus.Length != 0) hash ^= LoadingStatus.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= packages_.GetHashCode();
      hash ^= definitions_.GetHashCode();
      if (DefaultGameDefinitionName.Length != 0) hash ^= DefaultGameDefinitionName.GetHashCode();
      if (SolutionFilePath.Length != 0) hash ^= SolutionFilePath.GetHashCode();
      if (DefaultGameBinPath.Length != 0) hash ^= DefaultGameBinPath.GetHashCode();
      if (HashCode != 0) hash ^= HashCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectPath);
      }
      if (LoadingStatus.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LoadingStatus);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      packages_.WriteTo(output, _repeated_packages_codec);
      definitions_.WriteTo(output, _repeated_definitions_codec);
      if (DefaultGameDefinitionName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DefaultGameDefinitionName);
      }
      if (SolutionFilePath.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SolutionFilePath);
      }
      if (DefaultGameBinPath.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DefaultGameBinPath);
      }
      if (HashCode != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HashCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectPath);
      }
      if (LoadingStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadingStatus);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += packages_.CalculateSize(_repeated_packages_codec);
      size += definitions_.CalculateSize(_repeated_definitions_codec);
      if (DefaultGameDefinitionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultGameDefinitionName);
      }
      if (SolutionFilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SolutionFilePath);
      }
      if (DefaultGameBinPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultGameBinPath);
      }
      if (HashCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HashCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Project other) {
      if (other == null) {
        return;
      }
      if (other.ProjectPath.Length != 0) {
        ProjectPath = other.ProjectPath;
      }
      if (other.LoadingStatus.Length != 0) {
        LoadingStatus = other.LoadingStatus;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      packages_.Add(other.packages_);
      definitions_.Add(other.definitions_);
      if (other.DefaultGameDefinitionName.Length != 0) {
        DefaultGameDefinitionName = other.DefaultGameDefinitionName;
      }
      if (other.SolutionFilePath.Length != 0) {
        SolutionFilePath = other.SolutionFilePath;
      }
      if (other.DefaultGameBinPath.Length != 0) {
        DefaultGameBinPath = other.DefaultGameBinPath;
      }
      if (other.HashCode != 0) {
        HashCode = other.HashCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectPath = input.ReadString();
            break;
          }
          case 18: {
            LoadingStatus = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            packages_.AddEntriesFrom(input, _repeated_packages_codec);
            break;
          }
          case 42: {
            definitions_.AddEntriesFrom(input, _repeated_definitions_codec);
            break;
          }
          case 50: {
            DefaultGameDefinitionName = input.ReadString();
            break;
          }
          case 58: {
            SolutionFilePath = input.ReadString();
            break;
          }
          case 66: {
            DefaultGameBinPath = input.ReadString();
            break;
          }
          case 72: {
            HashCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Package : pb::IMessage<Package> {
    private static readonly pb::MessageParser<Package> _parser = new pb::MessageParser<Package>(() => new Package());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Package> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package(Package other) : this() {
      repository_ = other.repository_;
      package_ = other.package_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package Clone() {
      return new Package(this);
    }

    /// <summary>Field number for the "repository" field.</summary>
    public const int RepositoryFieldNumber = 1;
    private string repository_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Repository {
      get { return repository_; }
      set {
        repository_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "package" field.</summary>
    public const int Package_FieldNumber = 2;
    private string package_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Package_ {
      get { return package_; }
      set {
        package_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Package);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Package other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Repository != other.Repository) return false;
      if (Package_ != other.Package_) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Repository.Length != 0) hash ^= Repository.GetHashCode();
      if (Package_.Length != 0) hash ^= Package_.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Repository.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Repository);
      }
      if (Package_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Package_);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Repository.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Repository);
      }
      if (Package_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Package_);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Package other) {
      if (other == null) {
        return;
      }
      if (other.Repository.Length != 0) {
        Repository = other.Repository;
      }
      if (other.Package_.Length != 0) {
        Package_ = other.Package_;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Repository = input.ReadString();
            break;
          }
          case 18: {
            Package_ = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Definition : pb::IMessage<Definition> {
    private static readonly pb::MessageParser<Definition> _parser = new pb::MessageParser<Definition>(() => new Definition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Definition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Definition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Definition(Definition other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      role_ = other.role_;
      xmlDocumentPath_ = other.xmlDocumentPath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Definition Clone() {
      return new Definition(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 3;
    private string role_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Role {
      get { return role_; }
      set {
        role_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xmlDocumentPath" field.</summary>
    public const int XmlDocumentPathFieldNumber = 4;
    private string xmlDocumentPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XmlDocumentPath {
      get { return xmlDocumentPath_; }
      set {
        xmlDocumentPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Definition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Definition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Role != other.Role) return false;
      if (XmlDocumentPath != other.XmlDocumentPath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Role.Length != 0) hash ^= Role.GetHashCode();
      if (XmlDocumentPath.Length != 0) hash ^= XmlDocumentPath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Role.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Role);
      }
      if (XmlDocumentPath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(XmlDocumentPath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Role.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Role);
      }
      if (XmlDocumentPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XmlDocumentPath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Definition other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Role.Length != 0) {
        Role = other.Role;
      }
      if (other.XmlDocumentPath.Length != 0) {
        XmlDocumentPath = other.XmlDocumentPath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Role = input.ReadString();
            break;
          }
          case 34: {
            XmlDocumentPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBackBufferDimensionsRequest : pb::IMessage<GetBackBufferDimensionsRequest> {
    private static readonly pb::MessageParser<GetBackBufferDimensionsRequest> _parser = new pb::MessageParser<GetBackBufferDimensionsRequest>(() => new GetBackBufferDimensionsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBackBufferDimensionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBackBufferDimensionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBackBufferDimensionsRequest(GetBackBufferDimensionsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBackBufferDimensionsRequest Clone() {
      return new GetBackBufferDimensionsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBackBufferDimensionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBackBufferDimensionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBackBufferDimensionsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetBackBufferDimensionsResponse : pb::IMessage<GetBackBufferDimensionsResponse> {
    private static readonly pb::MessageParser<GetBackBufferDimensionsResponse> _parser = new pb::MessageParser<GetBackBufferDimensionsResponse>(() => new GetBackBufferDimensionsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBackBufferDimensionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBackBufferDimensionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBackBufferDimensionsResponse(GetBackBufferDimensionsResponse other) : this() {
      width_ = other.width_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBackBufferDimensionsResponse Clone() {
      return new GetBackBufferDimensionsResponse(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBackBufferDimensionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBackBufferDimensionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBackBufferDimensionsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBaseDirectoryRequest : pb::IMessage<GetBaseDirectoryRequest> {
    private static readonly pb::MessageParser<GetBaseDirectoryRequest> _parser = new pb::MessageParser<GetBaseDirectoryRequest>(() => new GetBaseDirectoryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBaseDirectoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseDirectoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseDirectoryRequest(GetBaseDirectoryRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseDirectoryRequest Clone() {
      return new GetBaseDirectoryRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBaseDirectoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBaseDirectoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBaseDirectoryRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetBaseDirectoryResponse : pb::IMessage<GetBaseDirectoryResponse> {
    private static readonly pb::MessageParser<GetBaseDirectoryResponse> _parser = new pb::MessageParser<GetBaseDirectoryResponse>(() => new GetBaseDirectoryResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBaseDirectoryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseDirectoryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseDirectoryResponse(GetBaseDirectoryResponse other) : this() {
      baseDirectory_ = other.baseDirectory_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseDirectoryResponse Clone() {
      return new GetBaseDirectoryResponse(this);
    }

    /// <summary>Field number for the "baseDirectory" field.</summary>
    public const int BaseDirectoryFieldNumber = 1;
    private string baseDirectory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseDirectory {
      get { return baseDirectory_; }
      set {
        baseDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBaseDirectoryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBaseDirectoryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseDirectory != other.BaseDirectory) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseDirectory.Length != 0) hash ^= BaseDirectory.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseDirectory.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseDirectory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseDirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseDirectory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBaseDirectoryResponse other) {
      if (other == null) {
        return;
      }
      if (other.BaseDirectory.Length != 0) {
        BaseDirectory = other.BaseDirectory;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BaseDirectory = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlaybackStateChangedRequest : pb::IMessage<PlaybackStateChangedRequest> {
    private static readonly pb::MessageParser<PlaybackStateChangedRequest> _parser = new pb::MessageParser<PlaybackStateChangedRequest>(() => new PlaybackStateChangedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaybackStateChangedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackStateChangedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackStateChangedRequest(PlaybackStateChangedRequest other) : this() {
      state_ = other.state_;
      StartTime = other.startTime_ != null ? other.StartTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackStateChangedRequest Clone() {
      return new PlaybackStateChangedRequest(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Protogame.Editor.Grpc.Editor.PlaybackState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protogame.Editor.Grpc.Editor.PlaybackState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private global::Protogame.Editor.Grpc.Editor.Timestamp startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protogame.Editor.Grpc.Editor.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaybackStateChangedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaybackStateChangedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (startTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaybackStateChangedRequest other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Protogame.Editor.Grpc.Editor.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Protogame.Editor.Grpc.Editor.PlaybackState) input.ReadEnum();
            break;
          }
          case 18: {
            if (startTime_ == null) {
              startTime_ = new global::Protogame.Editor.Grpc.Editor.Timestamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlaybackStateChangedResponse : pb::IMessage<PlaybackStateChangedResponse> {
    private static readonly pb::MessageParser<PlaybackStateChangedResponse> _parser = new pb::MessageParser<PlaybackStateChangedResponse>(() => new PlaybackStateChangedResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaybackStateChangedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackStateChangedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackStateChangedResponse(PlaybackStateChangedResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackStateChangedResponse Clone() {
      return new PlaybackStateChangedResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaybackStateChangedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaybackStateChangedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaybackStateChangedResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Timestamp : pb::IMessage<Timestamp> {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      unixTimestamp_ = other.unixTimestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "unixTimestamp" field.</summary>
    public const int UnixTimestampFieldNumber = 1;
    private ulong unixTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnixTimestamp {
      get { return unixTimestamp_; }
      set {
        unixTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnixTimestamp != other.UnixTimestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnixTimestamp != 0UL) hash ^= UnixTimestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnixTimestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UnixTimestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnixTimestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnixTimestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.UnixTimestamp != 0UL) {
        UnixTimestamp = other.UnixTimestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnixTimestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReceiveSignalRequest : pb::IMessage<ReceiveSignalRequest> {
    private static readonly pb::MessageParser<ReceiveSignalRequest> _parser = new pb::MessageParser<ReceiveSignalRequest>(() => new ReceiveSignalRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiveSignalRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveSignalRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveSignalRequest(ReceiveSignalRequest other) : this() {
      name_ = other.name_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveSignalRequest Clone() {
      return new ReceiveSignalRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiveSignalRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiveSignalRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiveSignalRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReceiveSignalResponse : pb::IMessage<ReceiveSignalResponse> {
    private static readonly pb::MessageParser<ReceiveSignalResponse> _parser = new pb::MessageParser<ReceiveSignalResponse>(() => new ReceiveSignalResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiveSignalResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveSignalResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveSignalResponse(ReceiveSignalResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveSignalResponse Clone() {
      return new ReceiveSignalResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiveSignalResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiveSignalResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiveSignalResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ActivateRequest : pb::IMessage<ActivateRequest> {
    private static readonly pb::MessageParser<ActivateRequest> _parser = new pb::MessageParser<ActivateRequest>(() => new ActivateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateRequest(ActivateRequest other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateRequest Clone() {
      return new ActivateRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivateResponse : pb::IMessage<ActivateResponse> {
    private static readonly pb::MessageParser<ActivateResponse> _parser = new pb::MessageParser<ActivateResponse>(() => new ActivateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateResponse(ActivateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateResponse Clone() {
      return new ActivateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ActivateGameWindowRequest : pb::IMessage<ActivateGameWindowRequest> {
    private static readonly pb::MessageParser<ActivateGameWindowRequest> _parser = new pb::MessageParser<ActivateGameWindowRequest>(() => new ActivateGameWindowRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivateGameWindowRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateGameWindowRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateGameWindowRequest(ActivateGameWindowRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateGameWindowRequest Clone() {
      return new ActivateGameWindowRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivateGameWindowRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivateGameWindowRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivateGameWindowRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ActivateGameWindowResponse : pb::IMessage<ActivateGameWindowResponse> {
    private static readonly pb::MessageParser<ActivateGameWindowResponse> _parser = new pb::MessageParser<ActivateGameWindowResponse>(() => new ActivateGameWindowResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivateGameWindowResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateGameWindowResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateGameWindowResponse(ActivateGameWindowResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateGameWindowResponse Clone() {
      return new ActivateGameWindowResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivateGameWindowResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivateGameWindowResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivateGameWindowResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class AllocateWindowRequest : pb::IMessage<AllocateWindowRequest> {
    private static readonly pb::MessageParser<AllocateWindowRequest> _parser = new pb::MessageParser<AllocateWindowRequest>(() => new AllocateWindowRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllocateWindowRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocateWindowRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocateWindowRequest(AllocateWindowRequest other) : this() {
      parameter_ = other.parameter_;
      location_ = other.location_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocateWindowRequest Clone() {
      return new AllocateWindowRequest(this);
    }

    /// <summary>Field number for the "parameter" field.</summary>
    public const int ParameterFieldNumber = 1;
    private string parameter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parameter {
      get { return parameter_; }
      set {
        parameter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 2;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllocateWindowRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllocateWindowRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parameter != other.Parameter) return false;
      if (Location != other.Location) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parameter.Length != 0) hash ^= Parameter.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parameter.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parameter);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Location);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parameter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parameter);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllocateWindowRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parameter.Length != 0) {
        Parameter = other.Parameter;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parameter = input.ReadString();
            break;
          }
          case 18: {
            Location = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllocateWindowResponse : pb::IMessage<AllocateWindowResponse> {
    private static readonly pb::MessageParser<AllocateWindowResponse> _parser = new pb::MessageParser<AllocateWindowResponse>(() => new AllocateWindowResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllocateWindowResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocateWindowResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocateWindowResponse(AllocateWindowResponse other) : this() {
      alreadyExists_ = other.alreadyExists_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocateWindowResponse Clone() {
      return new AllocateWindowResponse(this);
    }

    /// <summary>Field number for the "alreadyExists" field.</summary>
    public const int AlreadyExistsFieldNumber = 1;
    private bool alreadyExists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AlreadyExists {
      get { return alreadyExists_; }
      set {
        alreadyExists_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllocateWindowResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllocateWindowResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlreadyExists != other.AlreadyExists) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AlreadyExists != false) hash ^= AlreadyExists.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AlreadyExists != false) {
        output.WriteRawTag(8);
        output.WriteBool(AlreadyExists);
      }
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AlreadyExists != false) {
        size += 1 + 1;
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllocateWindowResponse other) {
      if (other == null) {
        return;
      }
      if (other.AlreadyExists != false) {
        AlreadyExists = other.AlreadyExists;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AlreadyExists = input.ReadBool();
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetWindowPropertiesRequest : pb::IMessage<SetWindowPropertiesRequest> {
    private static readonly pb::MessageParser<SetWindowPropertiesRequest> _parser = new pb::MessageParser<SetWindowPropertiesRequest>(() => new SetWindowPropertiesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetWindowPropertiesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetWindowPropertiesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetWindowPropertiesRequest(SetWindowPropertiesRequest other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      iconName_ = other.iconName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetWindowPropertiesRequest Clone() {
      return new SetWindowPropertiesRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iconName" field.</summary>
    public const int IconNameFieldNumber = 3;
    private string iconName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconName {
      get { return iconName_; }
      set {
        iconName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetWindowPropertiesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetWindowPropertiesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (IconName != other.IconName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (IconName.Length != 0) hash ^= IconName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (IconName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IconName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (IconName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetWindowPropertiesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.IconName.Length != 0) {
        IconName = other.IconName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            IconName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetWindowPropertiesResponse : pb::IMessage<SetWindowPropertiesResponse> {
    private static readonly pb::MessageParser<SetWindowPropertiesResponse> _parser = new pb::MessageParser<SetWindowPropertiesResponse>(() => new SetWindowPropertiesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetWindowPropertiesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetWindowPropertiesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetWindowPropertiesResponse(SetWindowPropertiesResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetWindowPropertiesResponse Clone() {
      return new SetWindowPropertiesResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetWindowPropertiesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetWindowPropertiesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetWindowPropertiesResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
